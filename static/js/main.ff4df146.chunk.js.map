{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","name","src","url","id","onClick","handleClick","Wrapper","children","Title","Score","score","App","state","images","this_id","console","log","_this","image","find","x","clicked","setState","images_new","i","length","push","j","Math","floor","random","_ref","index","findIndex","item","_this2","this","components_Wrapper","components_Title","components_Score","map","components_ImageCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAaeA,MAVf,SAAmBC,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,IAAKC,GAAIT,EAAMS,GAAIC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMS,UCApFG,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,WCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,WCKvBE,MANf,SAAef,GACb,OACEC,EAAAC,EAAAC,cAAA,oBAAYH,EAAMgB,eC0FPC,6MArFbC,MAAQ,CACNC,SACAH,MAAO,KAUTL,YAAc,SAAAS,GACZC,QAAQC,IAAI,KACZD,QAAQC,IAAI,KACZD,QAAQC,IAAI,6BAA+BF,GAE3C,IAAMD,EAASI,EAAKL,MAAMC,OAEtBK,EAAQL,EAAOM,KAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOW,IACtCC,QAAQC,IAAI,wBAA0BE,EAAMlB,MAE5C,IAAMqB,EAAUH,EAAMG,QAGtB,GAFAN,QAAQC,IAAI,sCAAwCK,GACpDJ,EAAKK,SAAS,CAAET,WACXQ,EAcE,CAELN,QAAQC,IAAI,4CAEZD,QAAQC,IAAI,KACZD,QAAQC,IAAI,oBACZ,IAAIO,EAAa,GACbV,EAASI,EAAKL,MAAMC,OACxBE,QAAQC,IAAI,cAAgBH,GAE5B,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAOY,OAAQD,IACjCT,QAAQC,IAAI,WAAaH,EAAOW,IAChCX,EAAOW,GAAGH,SAAU,EACpBE,EAAWG,KAAKb,EAAOW,IAGzB,IAAK,IAAIA,EAAID,EAAWE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAMG,EAAIC,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IADIO,EAEb,CAACR,EAAWI,GAAIJ,EAAWC,IAA3DD,EAAWC,GAFkCO,EAAA,GAE9BR,EAAWI,GAFmBI,EAAA,GAIhDhB,QAAQC,IAAI,eAAiBO,GAC7BN,EAAKK,SAAS,CAAET,OAAQU,EAAYb,MAAO,IAC3CK,QAAQC,IAAI,0BAA4BO,OApC5B,CACZR,QAAQC,IAAI,cAEZE,EAAMG,SAAU,EAGhB,IAAIW,EAAQnB,EAAOoB,UAAU,SAAUC,EAAMV,GAC3C,OAAOU,EAAK/B,KAAOW,IAErBC,QAAQC,IAAI,sBAAwBgB,GACpCnB,EAAOmB,GAASd,EAChBD,EAAKK,SAAS,CAAET,WAEhBI,EAAKK,SAAS,CAAEZ,MAAOO,EAAKL,MAAMF,MAAQ,8EA4BrC,IAAAyB,EAAAC,KACP,OACEzC,EAAAC,EAAAC,cAACwC,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,oBACA3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAO7B,MAAO0B,KAAKxB,MAAMF,QACxB0B,KAAKxB,MAAMC,OAAO2B,IAAI,SAAAtB,GAAK,OAC1BvB,EAAAC,EAAAC,cAAC4C,EAAD,CACEpC,YAAa8B,EAAK9B,YAClBF,GAAIe,EAAMf,GACVD,IAAKgB,EAAMhB,IACXF,KAAMkB,EAAMlB,KACZqB,QAASH,EAAMG,oBA/ETqB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff4df146.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./../../style.css\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\" >\n        <img alt={props.name} src={props.url} id={props.id} onClick={() => props.handleClick(props.id)}/>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard; ","import React from \"react\";\n// import \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n// import \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./../../style.css\";\n\nfunction Score(props) {\n  return (\n    <h1>Score: {props.score}</h1>    \n  );\n}\n\nexport default Score; ","// import './App.css';\nimport React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Score from \"./components/Score\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    images,\n    score: 0\n  };\n\n  // removeFriend = id => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n\n  handleClick = this_id => {\n    console.log(\" \");\n    console.log(\" \");\n    console.log(\"You clicked on image (id) \" + this_id);\n    // 1) Make a copy of all images\n    const images = this.state.images;\n    // 2) find the image with the given id\n    let image = images.find(x => x.id === this_id);\n    console.log(\"You selected (name): \" + image.name);\n    // 3) Get value of clicked\n    const clicked = image.clicked;\n    console.log(\"This image has a clicked value of: \" + clicked);\n    this.setState({ images });\n    if (!clicked) {\n      console.log(\"You got it\");\n      // Mark image as clicked\n      image.clicked = true;\n      // Insert back into array\n      // Get index of image\n      var index = images.findIndex(function (item, i) {\n        return item.id === this_id\n      });\n      console.log(\"index of image is: \" + index);\n      images[index] = image;\n      this.setState({ images });\n      // Shuffle Images\n      this.setState({ score: this.state.score + 1 });\n    } else {\n      // Reset clicked field on all images to false\n      console.log(\"Sorry, you already clicked on this image\")\n\n      console.log(\" \");\n      console.log(\"Resetting images\");\n      let images_new = [];\n      let images = this.state.images;\n      console.log(\"images is: \" + images);\n\n      for (var i = 0; i < images.length; i++) {\n        console.log(\"img is: \" + images[i])\n        images[i].clicked = false;\n        images_new.push(images[i]);\n      }\n      // Shuffle Images\n      for (let i = images_new.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [images_new[i], images_new[j]] = [images_new[j], images_new[i]];\n      }\n      console.log(\"images now: \" + images_new);\n      this.setState({ images: images_new, score: 0 });\n      console.log(\"images after setState: \" + images_new);\n    }\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Clicky Game</Title>\n        <Score score={this.state.score} />\n        {this.state.images.map(image => (\n          <ImageCard\n            handleClick={this.handleClick}\n            id={image.id}\n            url={image.url}\n            name={image.name}\n            clicked={image.clicked}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}